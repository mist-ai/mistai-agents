{
  "openapi": "3.1.0",
  "info": {
    "title": "Letta API",
    "summary": "Create LLM agents with long-term memory and custom tools \ud83d\udcda\ud83e\udd99",
    "version": "1.0.0"
  },
  "paths": {
    "/v1/tools/{tool_id}": {
      "delete": {
        "tags": [
          "tools"
        ],
        "summary": "Delete Tool",
        "description": "Delete a tool by name",
        "operationId": "delete_tool",
        "parameters": [
          {
            "name": "tool_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tool Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "tools"
        ],
        "summary": "Get Tool",
        "description": "Get a tool by ID",
        "operationId": "get_tool",
        "parameters": [
          {
            "name": "tool_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tool Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/letta__schemas__tool__Tool"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "tools"
        ],
        "summary": "Update Tool",
        "description": "Update an existing tool",
        "operationId": "update_tool",
        "parameters": [
          {
            "name": "tool_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tool Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToolUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/letta__schemas__tool__Tool"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tools/name/{tool_name}": {
      "get": {
        "tags": [
          "tools"
        ],
        "summary": "Get Tool Id",
        "description": "Get a tool ID by name",
        "operationId": "get_tool_id_by_name",
        "parameters": [
          {
            "name": "tool_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tool Name"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Get Tool Id By Name"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tools/": {
      "get": {
        "tags": [
          "tools"
        ],
        "summary": "List Tools",
        "description": "Get a list of all tools available to agents belonging to the org of the user",
        "operationId": "list_tools",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Cursor"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "default": 50,
              "title": "Limit"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/letta__schemas__tool__Tool"
                  },
                  "title": "Response List Tools"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tools"
        ],
        "summary": "Create Tool",
        "description": "Create a new tool",
        "operationId": "create_tool",
        "parameters": [
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToolCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/letta__schemas__tool__Tool"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "tools"
        ],
        "summary": "Upsert Tool",
        "description": "Create or update a tool",
        "operationId": "upsert_tool",
        "parameters": [
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToolCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/letta__schemas__tool__Tool"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tools/add-base-tools": {
      "post": {
        "tags": [
          "tools"
        ],
        "summary": "Upsert Base Tools",
        "description": "Upsert base tools",
        "operationId": "add_base_tools",
        "parameters": [
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/letta__schemas__tool__Tool"
                  },
                  "title": "Response Add Base Tools"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tools/run": {
      "post": {
        "tags": [
          "tools"
        ],
        "summary": "Run Tool From Source",
        "description": "Attempt to build a tool from source, then run it on the provided arguments",
        "operationId": "run_tool_from_source",
        "parameters": [
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ToolRunFromSource"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToolReturnMessage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tools/composio/apps": {
      "get": {
        "tags": [
          "tools"
        ],
        "summary": "List Composio Apps",
        "description": "Get a list of all Composio apps",
        "operationId": "list_composio_apps",
        "parameters": [
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppModel"
                  },
                  "title": "Response List Composio Apps"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tools/composio/apps/{composio_app_name}/actions": {
      "get": {
        "tags": [
          "tools"
        ],
        "summary": "List Composio Actions By App",
        "description": "Get a list of all Composio actions for a specific app",
        "operationId": "list_composio_actions_by_app",
        "parameters": [
          {
            "name": "composio_app_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Composio App Name"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionModel"
                  },
                  "title": "Response List Composio Actions By App"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tools/composio/{composio_action_name}": {
      "post": {
        "tags": [
          "tools"
        ],
        "summary": "Add Composio Tool",
        "description": "Add a new Composio tool by action name (Composio refers to each tool as an `Action`)",
        "operationId": "add_composio_tool",
        "parameters": [
          {
            "name": "composio_action_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Composio Action Name"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/letta__schemas__tool__Tool"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sources/{source_id}": {
      "get": {
        "tags": [
          "sources"
        ],
        "summary": "Get Source",
        "description": "Get all sources",
        "operationId": "get_source",
        "parameters": [
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Source Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "sources"
        ],
        "summary": "Update Source",
        "description": "Update the name or documentation of an existing data source.",
        "operationId": "update_source",
        "parameters": [
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Source Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "sources"
        ],
        "summary": "Delete Source",
        "description": "Delete a data source.",
        "operationId": "delete_source",
        "parameters": [
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Source Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sources/name/{source_name}": {
      "get": {
        "tags": [
          "sources"
        ],
        "summary": "Get Source Id By Name",
        "description": "Get a source by name",
        "operationId": "get_source_id_by_name",
        "parameters": [
          {
            "name": "source_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Source Name"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Get Source Id By Name"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sources/": {
      "get": {
        "tags": [
          "sources"
        ],
        "summary": "List Sources",
        "description": "List all data sources created by a user.",
        "operationId": "list_sources",
        "parameters": [
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Source"
                  },
                  "title": "Response List Sources"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "sources"
        ],
        "summary": "Create Source",
        "description": "Create a new data source.",
        "operationId": "create_source",
        "parameters": [
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sources/{source_id}/attach": {
      "post": {
        "tags": [
          "sources"
        ],
        "summary": "Attach Source To Agent",
        "description": "Attach a data source to an existing agent.",
        "operationId": "attach_agent_to_source",
        "parameters": [
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Source Id"
            }
          },
          {
            "name": "agent_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the agent to attach the source to.",
              "title": "Agent Id"
            },
            "description": "The unique identifier of the agent to attach the source to."
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sources/{source_id}/detach": {
      "post": {
        "tags": [
          "sources"
        ],
        "summary": "Detach Source From Agent",
        "description": "Detach a data source from an existing agent.",
        "operationId": "detach_agent_from_source",
        "parameters": [
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Source Id"
            }
          },
          {
            "name": "agent_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the agent to detach the source from.",
              "title": "Agent Id"
            },
            "description": "The unique identifier of the agent to detach the source from."
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sources/{source_id}/upload": {
      "post": {
        "tags": [
          "sources"
        ],
        "summary": "Upload File To Source",
        "description": "Upload a file to a data source.",
        "operationId": "upload_file_to_source",
        "parameters": [
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Source Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_file_to_source"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sources/{source_id}/passages": {
      "get": {
        "tags": [
          "sources"
        ],
        "summary": "List Passages",
        "description": "List all passages associated with a data source.",
        "operationId": "list_source_passages",
        "parameters": [
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Source Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Passage"
                  },
                  "title": "Response List Source Passages"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sources/{source_id}/files": {
      "get": {
        "tags": [
          "sources"
        ],
        "summary": "List Files From Source",
        "description": "List paginated files associated with a data source.",
        "operationId": "list_files_from_source",
        "parameters": [
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Source Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Number of files to return",
              "default": 1000,
              "title": "Limit"
            },
            "description": "Number of files to return"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Pagination cursor to fetch the next set of results",
              "title": "Cursor"
            },
            "description": "Pagination cursor to fetch the next set of results"
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileMetadata"
                  },
                  "title": "Response List Files From Source"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sources/{source_id}/{file_id}": {
      "delete": {
        "tags": [
          "sources"
        ],
        "summary": "Delete File From Source",
        "description": "Delete a data source.",
        "operationId": "delete_file_from_source",
        "parameters": [
          {
            "name": "source_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Source Id"
            }
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "File Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/": {
      "get": {
        "tags": [
          "agents"
        ],
        "summary": "List Agents",
        "description": "List all agents associated with a given user.\nThis endpoint retrieves a list of all agents and their configurations associated with the specified user ID.",
        "operationId": "list_agents",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Name of the agent",
              "title": "Name"
            },
            "description": "Name of the agent"
          },
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "List of tags to filter agents by",
              "title": "Tags"
            },
            "description": "List of tags to filter agents by"
          },
          {
            "name": "match_all_tags",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "If True, only returns agents that match ALL given tags. Otherwise, return agents that have ANY of the passed in tags.",
              "default": false,
              "title": "Match All Tags"
            },
            "description": "If True, only returns agents that match ALL given tags. Otherwise, return agents that have ANY of the passed in tags."
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AgentState"
                  },
                  "title": "Response List Agents"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "agents"
        ],
        "summary": "Create Agent",
        "description": "Create a new agent with the specified configuration.",
        "operationId": "create_agent",
        "parameters": [
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAgentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentState"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/context": {
      "get": {
        "tags": [
          "agents"
        ],
        "summary": "Get Agent Context Window",
        "description": "Retrieve the context window of a specific agent.",
        "operationId": "get_agent_context_window",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContextWindowOverview"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}": {
      "patch": {
        "tags": [
          "agents"
        ],
        "summary": "Update Agent",
        "description": "Update an exsiting agent",
        "operationId": "update_agent",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAgent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentState"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "agents"
        ],
        "summary": "Get Agent State",
        "description": "Get the state of the agent.",
        "operationId": "get_agent",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentState"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "agents"
        ],
        "summary": "Delete Agent",
        "description": "Delete an agent.",
        "operationId": "delete_agent",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/tools": {
      "get": {
        "tags": [
          "agents"
        ],
        "summary": "Get Tools From Agent",
        "description": "Get tools from an existing agent",
        "operationId": "get_tools_from_agent",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/letta__schemas__tool__Tool"
                  },
                  "title": "Response Get Tools From Agent"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/add-tool/{tool_id}": {
      "patch": {
        "tags": [
          "agents"
        ],
        "summary": "Add Tool To Agent",
        "description": "Add tools to an existing agent",
        "operationId": "add_tool_to_agent",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          },
          {
            "name": "tool_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tool Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentState"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/remove-tool/{tool_id}": {
      "patch": {
        "tags": [
          "agents"
        ],
        "summary": "Remove Tool From Agent",
        "description": "Add tools to an existing agent",
        "operationId": "remove_tool_from_agent",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          },
          {
            "name": "tool_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Tool Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentState"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/sources": {
      "get": {
        "tags": [
          "agents"
        ],
        "summary": "Get Agent Sources",
        "description": "Get the sources associated with an agent.",
        "operationId": "get_agent_sources",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Source"
                  },
                  "title": "Response Get Agent Sources"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/memory/messages": {
      "get": {
        "tags": [
          "agents"
        ],
        "summary": "Get Agent In Context Messages",
        "description": "Retrieve the messages in the context of a specific agent.",
        "operationId": "list_agent_in_context_messages",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/letta__schemas__message__Message"
                  },
                  "title": "Response List Agent In Context Messages"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/memory": {
      "get": {
        "tags": [
          "agents"
        ],
        "summary": "Get Agent Memory",
        "description": "Retrieve the memory state of a specific agent.\nThis endpoint fetches the current memory state of the agent identified by the user ID and agent ID.",
        "operationId": "get_agent_memory",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Memory"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/memory/block/{block_label}": {
      "get": {
        "tags": [
          "agents"
        ],
        "summary": "Get Agent Memory Block",
        "description": "Retrieve a memory block from an agent.",
        "operationId": "get_agent_memory_block",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          },
          {
            "name": "block_label",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Block Label"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Block"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "agents"
        ],
        "summary": "Remove Agent Memory Block",
        "description": "Removes a memory block from an agent by unlnking it. If the block is not linked to any other agent, it is deleted.",
        "operationId": "remove_agent_memory_block_by_label",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          },
          {
            "name": "block_label",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Block Label"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Memory"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "agents"
        ],
        "summary": "Update Agent Memory Block",
        "description": "Removes a memory block from an agent by unlnking it. If the block is not linked to any other agent, it is deleted.",
        "operationId": "update_agent_memory_block_by_label",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          },
          {
            "name": "block_label",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Block Label"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlockUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Block"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/memory/block": {
      "get": {
        "tags": [
          "agents"
        ],
        "summary": "Get Agent Memory Blocks",
        "description": "Retrieve the memory blocks of a specific agent.",
        "operationId": "get_agent_memory_blocks",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Block"
                  },
                  "title": "Response Get Agent Memory Blocks"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "agents"
        ],
        "summary": "Add Agent Memory Block",
        "description": "Creates a memory block and links it to the agent.",
        "operationId": "add_agent_memory_block",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBlock"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Memory"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/memory/recall": {
      "get": {
        "tags": [
          "agents"
        ],
        "summary": "Get Agent Recall Memory Summary",
        "description": "Retrieve the summary of the recall memory of a specific agent.",
        "operationId": "get_agent_recall_memory_summary",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecallMemorySummary"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/memory/archival": {
      "get": {
        "tags": [
          "agents"
        ],
        "summary": "Get Agent Archival Memory Summary",
        "description": "Retrieve the summary of the archival memory of a specific agent.",
        "operationId": "get_agent_archival_memory_summary",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArchivalMemorySummary"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/archival": {
      "get": {
        "tags": [
          "agents"
        ],
        "summary": "Get Agent Archival Memory",
        "description": "Retrieve the memories in an agent's archival memory store (paginated query).",
        "operationId": "list_agent_archival_memory",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Unique ID of the memory to start the query range at.",
              "title": "After"
            },
            "description": "Unique ID of the memory to start the query range at."
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Unique ID of the memory to end the query range at.",
              "title": "Before"
            },
            "description": "Unique ID of the memory to end the query range at."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "description": "How many results to include in the response.",
              "title": "Limit"
            },
            "description": "How many results to include in the response."
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Passage"
                  },
                  "title": "Response List Agent Archival Memory"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "agents"
        ],
        "summary": "Insert Agent Archival Memory",
        "description": "Insert a memory into an agent's archival memory store.",
        "operationId": "create_agent_archival_memory",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateArchivalMemory"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Passage"
                  },
                  "title": "Response Create Agent Archival Memory"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/archival/{memory_id}": {
      "delete": {
        "tags": [
          "agents"
        ],
        "summary": "Delete Agent Archival Memory",
        "description": "Delete a memory from an agent's archival memory store.",
        "operationId": "delete_agent_archival_memory",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          },
          {
            "name": "memory_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Memory Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/messages": {
      "get": {
        "tags": [
          "agents"
        ],
        "summary": "Get Agent Messages",
        "description": "Retrieve message history for an agent.",
        "operationId": "list_agent_messages",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Message before which to retrieve the returned messages.",
              "title": "Before"
            },
            "description": "Message before which to retrieve the returned messages."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of messages to retrieve.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Maximum number of messages to retrieve."
          },
          {
            "name": "msg_object",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "If true, returns Message objects. If false, return LettaMessage objects.",
              "default": false,
              "title": "Msg Object"
            },
            "description": "If true, returns Message objects. If false, return LettaMessage objects."
          },
          {
            "name": "assistant_message_tool_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The name of the designated message tool.",
              "default": "send_message",
              "title": "Assistant Message Tool Name"
            },
            "description": "The name of the designated message tool."
          },
          {
            "name": "assistant_message_tool_kwarg",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The name of the message argument in the designated message tool.",
              "default": "message",
              "title": "Assistant Message Tool Kwarg"
            },
            "description": "The name of the message argument in the designated message tool."
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/letta__schemas__message__Message"
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/SystemMessage-Output"
                          },
                          {
                            "$ref": "#/components/schemas/UserMessage-Output"
                          },
                          {
                            "$ref": "#/components/schemas/ReasoningMessage"
                          },
                          {
                            "$ref": "#/components/schemas/ToolCallMessage"
                          },
                          {
                            "$ref": "#/components/schemas/ToolReturnMessage"
                          },
                          {
                            "$ref": "#/components/schemas/AssistantMessage-Output"
                          }
                        ],
                        "discriminator": {
                          "propertyName": "message_type",
                          "mapping": {
                            "system_message": "#/components/schemas/SystemMessage-Output",
                            "user_message": "#/components/schemas/UserMessage-Output",
                            "reasoning_message": "#/components/schemas/ReasoningMessage",
                            "tool_call_message": "#/components/schemas/ToolCallMessage",
                            "tool_return_message": "#/components/schemas/ToolReturnMessage",
                            "assistant_message": "#/components/schemas/AssistantMessage-Output"
                          }
                        }
                      }
                    }
                  ],
                  "title": "Response List Agent Messages"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "agents"
        ],
        "summary": "Send Message",
        "description": "Process a user message and return the agent's response.\nThis endpoint accepts a message from a user and processes it through the agent.",
        "operationId": "create_agent_message",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LettaRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LettaResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/messages/{message_id}": {
      "patch": {
        "tags": [
          "agents"
        ],
        "summary": "Update Message",
        "description": "Update the details of a message associated with an agent.",
        "operationId": "update_agent_message",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          },
          {
            "name": "message_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Message Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/letta__schemas__message__Message"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/messages/stream": {
      "post": {
        "tags": [
          "agents"
        ],
        "summary": "Send Message Streaming",
        "description": "Process a user message and return the agent's response.\nThis endpoint accepts a message from a user and processes it through the agent.\nIt will stream the steps of the response always, and stream the tokens if 'stream_tokens' is set to True.",
        "operationId": "create_agent_message_stream",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LettaStreamingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {}
              },
              "text/event-stream": {
                "description": "Server-Sent Events stream"
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/{agent_id}/messages/async": {
      "post": {
        "tags": [
          "agents"
        ],
        "summary": "Send Message Async",
        "description": "Asynchronously process a user message and return a job ID.\nThe actual processing happens in the background, and the status can be checked using the job ID.",
        "operationId": "create_agent_message_async",
        "parameters": [
          {
            "name": "agent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Agent Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LettaRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/models/": {
      "get": {
        "tags": [
          "models",
          "llms"
        ],
        "summary": "List Llm Backends",
        "operationId": "list_models",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LLMConfig"
                  },
                  "type": "array",
                  "title": "Response List Models"
                }
              }
            }
          }
        }
      }
    },
    "/v1/models/embedding": {
      "get": {
        "tags": [
          "models",
          "llms"
        ],
        "summary": "List Embedding Backends",
        "operationId": "list_embedding_models",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EmbeddingConfig"
                  },
                  "type": "array",
                  "title": "Response List Embedding Models"
                }
              }
            }
          }
        }
      }
    },
    "/v1/blocks/": {
      "get": {
        "tags": [
          "blocks"
        ],
        "summary": "List Blocks",
        "operationId": "list_memory_blocks",
        "parameters": [
          {
            "name": "label",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Labels to include (e.g. human, persona)",
              "title": "Label"
            },
            "description": "Labels to include (e.g. human, persona)"
          },
          {
            "name": "templates_only",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Whether to include only templates",
              "default": true,
              "title": "Templates Only"
            },
            "description": "Whether to include only templates"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Name of the block",
              "title": "Name"
            },
            "description": "Name of the block"
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Block"
                  },
                  "title": "Response List Memory Blocks"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "blocks"
        ],
        "summary": "Create Block",
        "operationId": "create_memory_block",
        "parameters": [
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBlock"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Block"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/blocks/{block_id}": {
      "patch": {
        "tags": [
          "blocks"
        ],
        "summary": "Update Block",
        "operationId": "update_memory_block",
        "parameters": [
          {
            "name": "block_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Block Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlockUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Block"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "blocks"
        ],
        "summary": "Delete Block",
        "operationId": "delete_memory_block",
        "parameters": [
          {
            "name": "block_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Block Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Block"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "blocks"
        ],
        "summary": "Get Block",
        "operationId": "get_memory_block",
        "parameters": [
          {
            "name": "block_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Block Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Block"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/blocks/{block_id}/attach": {
      "patch": {
        "tags": [
          "blocks"
        ],
        "summary": "Link Agent Memory Block",
        "description": "Link a memory block to an agent.",
        "operationId": "link_agent_memory_block",
        "parameters": [
          {
            "name": "block_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Block Id"
            }
          },
          {
            "name": "agent_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the agent to attach the source to.",
              "title": "Agent Id"
            },
            "description": "The unique identifier of the agent to attach the source to."
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/blocks/{block_id}/detach": {
      "patch": {
        "tags": [
          "blocks"
        ],
        "summary": "Unlink Agent Memory Block",
        "description": "Unlink a memory block from an agent",
        "operationId": "unlink_agent_memory_block",
        "parameters": [
          {
            "name": "block_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Block Id"
            }
          },
          {
            "name": "agent_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The unique identifier of the agent to attach the source to.",
              "title": "Agent Id"
            },
            "description": "The unique identifier of the agent to attach the source to."
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/jobs/": {
      "get": {
        "tags": [
          "jobs"
        ],
        "summary": "List Jobs",
        "description": "List all jobs.",
        "operationId": "list_jobs",
        "parameters": [
          {
            "name": "source_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Only list jobs associated with the source.",
              "title": "Source Id"
            },
            "description": "Only list jobs associated with the source."
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Job"
                  },
                  "title": "Response List Jobs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/jobs/active": {
      "get": {
        "tags": [
          "jobs"
        ],
        "summary": "List Active Jobs",
        "description": "List all active jobs.",
        "operationId": "list_active_jobs",
        "parameters": [
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Job"
                  },
                  "title": "Response List Active Jobs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/jobs/{job_id}": {
      "get": {
        "tags": [
          "jobs"
        ],
        "summary": "Get Job",
        "description": "Get the status of a job.",
        "operationId": "get_job",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "jobs"
        ],
        "summary": "Delete Job",
        "description": "Delete a job by its job_id.",
        "operationId": "delete_job",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/health/": {
      "get": {
        "tags": [
          "health"
        ],
        "summary": "Health Check",
        "operationId": "health_check",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Health"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sandbox-config/": {
      "post": {
        "tags": [
          "sandbox-config"
        ],
        "summary": "Create Sandbox Config",
        "operationId": "create_sandbox_config_v1_sandbox_config__post",
        "parameters": [
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SandboxConfigCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SandboxConfig"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "sandbox-config"
        ],
        "summary": "List Sandbox Configs",
        "operationId": "list_sandbox_configs_v1_sandbox_config__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Number of results to return",
              "default": 1000,
              "title": "Limit"
            },
            "description": "Number of results to return"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Pagination cursor to fetch the next set of results",
              "title": "Cursor"
            },
            "description": "Pagination cursor to fetch the next set of results"
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SandboxConfig"
                  },
                  "title": "Response List Sandbox Configs V1 Sandbox Config  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sandbox-config/e2b/default": {
      "post": {
        "tags": [
          "sandbox-config"
        ],
        "summary": "Create Default E2B Sandbox Config",
        "operationId": "create_default_e2b_sandbox_config_v1_sandbox_config_e2b_default_post",
        "parameters": [
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SandboxConfig"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sandbox-config/local/default": {
      "post": {
        "tags": [
          "sandbox-config"
        ],
        "summary": "Create Default Local Sandbox Config",
        "operationId": "create_default_local_sandbox_config_v1_sandbox_config_local_default_post",
        "parameters": [
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SandboxConfig"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sandbox-config/{sandbox_config_id}": {
      "patch": {
        "tags": [
          "sandbox-config"
        ],
        "summary": "Update Sandbox Config",
        "operationId": "update_sandbox_config_v1_sandbox_config__sandbox_config_id__patch",
        "parameters": [
          {
            "name": "sandbox_config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Sandbox Config Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SandboxConfigUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SandboxConfig"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "sandbox-config"
        ],
        "summary": "Delete Sandbox Config",
        "operationId": "delete_sandbox_config_v1_sandbox_config__sandbox_config_id__delete",
        "parameters": [
          {
            "name": "sandbox_config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Sandbox Config Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sandbox-config/{sandbox_config_id}/environment-variable": {
      "post": {
        "tags": [
          "sandbox-config"
        ],
        "summary": "Create Sandbox Env Var",
        "operationId": "create_sandbox_env_var_v1_sandbox_config__sandbox_config_id__environment_variable_post",
        "parameters": [
          {
            "name": "sandbox_config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Sandbox Config Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SandboxEnvironmentVariableCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SandboxEnvironmentVariable"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "sandbox-config"
        ],
        "summary": "List Sandbox Env Vars",
        "operationId": "list_sandbox_env_vars_v1_sandbox_config__sandbox_config_id__environment_variable_get",
        "parameters": [
          {
            "name": "sandbox_config_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Sandbox Config Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Number of results to return",
              "default": 1000,
              "title": "Limit"
            },
            "description": "Number of results to return"
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Pagination cursor to fetch the next set of results",
              "title": "Cursor"
            },
            "description": "Pagination cursor to fetch the next set of results"
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SandboxEnvironmentVariable"
                  },
                  "title": "Response List Sandbox Env Vars V1 Sandbox Config  Sandbox Config Id  Environment Variable Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/sandbox-config/environment-variable/{env_var_id}": {
      "patch": {
        "tags": [
          "sandbox-config"
        ],
        "summary": "Update Sandbox Env Var",
        "operationId": "update_sandbox_env_var_v1_sandbox_config_environment_variable__env_var_id__patch",
        "parameters": [
          {
            "name": "env_var_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Env Var Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SandboxEnvironmentVariableUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SandboxEnvironmentVariable"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "sandbox-config"
        ],
        "summary": "Delete Sandbox Env Var",
        "operationId": "delete_sandbox_env_var_v1_sandbox_config_environment_variable__env_var_id__delete",
        "parameters": [
          {
            "name": "env_var_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Env Var Id"
            }
          },
          {
            "name": "user_id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/users/": {
      "get": {
        "tags": [
          "users",
          "admin",
          "admin"
        ],
        "summary": "List Users",
        "description": "Get a list of all users in the database",
        "operationId": "list_users",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Cursor"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "default": 50,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  },
                  "title": "Response List Users"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users",
          "admin",
          "admin"
        ],
        "summary": "Create User",
        "description": "Create a new user in the database",
        "operationId": "create_user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users",
          "admin",
          "admin"
        ],
        "summary": "Update User",
        "description": "Update a user in the database",
        "operationId": "update_user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users",
          "admin",
          "admin"
        ],
        "summary": "Delete User",
        "operationId": "delete_user",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The user_id key to be deleted.",
              "title": "User Id"
            },
            "description": "The user_id key to be deleted."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/admin/orgs/": {
      "get": {
        "tags": [
          "organization",
          "admin",
          "admin"
        ],
        "summary": "Get All Orgs",
        "description": "Get a list of all orgs in the database",
        "operationId": "list_orgs",
        "parameters": [
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Cursor"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "default": 50,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  },
                  "title": "Response List Orgs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "organization",
          "admin",
          "admin"
        ],
        "summary": "Create Org",
        "description": "Create a new org in the database",
        "operationId": "create_organization",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "organization",
          "admin",
          "admin"
        ],
        "summary": "Delete Org",
        "operationId": "delete_organization_by_id",
        "parameters": [
          {
            "name": "org_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The org_id key to be deleted.",
              "title": "Org Id"
            },
            "description": "The org_id key to be deleted."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Authenticate User",
        "description": "Authenticates the user and sends response with User related data.\n\nCurrently, this is a placeholder that simply returns a UUID placeholder",
        "operationId": "authenticate_user_v1_auth_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActionModel": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "display_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Name"
          },
          "parameters": {
            "$ref": "#/components/schemas/ActionParametersModel"
          },
          "response": {
            "$ref": "#/components/schemas/ActionResponseModel"
          },
          "appName": {
            "type": "string",
            "title": "Appname"
          },
          "appId": {
            "type": "string",
            "title": "Appid"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "default": false
          },
          "logo": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logo"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "name",
          "parameters",
          "response",
          "appName",
          "appId",
          "tags"
        ],
        "title": "ActionModel",
        "description": "Action data model."
      },
      "ActionParametersModel": {
        "properties": {
          "properties": {
            "type": "object",
            "title": "Properties"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "required": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Required"
          }
        },
        "type": "object",
        "required": [
          "properties",
          "title",
          "type"
        ],
        "title": "ActionParametersModel",
        "description": "Action parameter data models."
      },
      "ActionResponseModel": {
        "properties": {
          "properties": {
            "type": "object",
            "title": "Properties"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "required": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Required"
          }
        },
        "type": "object",
        "required": [
          "properties",
          "title",
          "type"
        ],
        "title": "ActionResponseModel",
        "description": "Action response data model."
      },
      "AgentState": {
        "properties": {
          "created_by_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By Id",
            "description": "The id of the user that made this object."
          },
          "last_updated_by_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated By Id",
            "description": "The id of the user that made this object."
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "The timestamp when the object was created."
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "The timestamp when the object was last updated."
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The id of the agent. Assigned by the database."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the agent."
          },
          "tool_rules": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ChildToolRule"
                    },
                    {
                      "$ref": "#/components/schemas/InitToolRule"
                    },
                    {
                      "$ref": "#/components/schemas/TerminalToolRule"
                    },
                    {
                      "$ref": "#/components/schemas/ConditionalToolRule"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Rules",
            "description": "The list of tool rules."
          },
          "message_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message Ids",
            "description": "The ids of the messages in the agent's in-context memory."
          },
          "system": {
            "type": "string",
            "title": "System",
            "description": "The system prompt used by the agent."
          },
          "agent_type": {
            "$ref": "#/components/schemas/AgentType",
            "description": "The type of agent."
          },
          "llm_config": {
            "$ref": "#/components/schemas/LLMConfig",
            "description": "The LLM configuration used by the agent."
          },
          "embedding_config": {
            "$ref": "#/components/schemas/EmbeddingConfig",
            "description": "The embedding configuration used by the agent."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The unique identifier of the organization associated with the agent."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the agent."
          },
          "metadata_": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata ",
            "description": "The metadata of the agent."
          },
          "memory": {
            "$ref": "#/components/schemas/Memory",
            "description": "The in-context memory of the agent."
          },
          "tools": {
            "items": {
              "$ref": "#/components/schemas/letta__schemas__tool__Tool"
            },
            "type": "array",
            "title": "Tools",
            "description": "The tools used by the agent."
          },
          "sources": {
            "items": {
              "$ref": "#/components/schemas/Source"
            },
            "type": "array",
            "title": "Sources",
            "description": "The sources used by the agent."
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "The tags associated with the agent."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id",
          "name",
          "system",
          "agent_type",
          "llm_config",
          "embedding_config",
          "memory",
          "tools",
          "sources",
          "tags"
        ],
        "title": "AgentState",
        "description": "Representation of an agent's state. This is the state of the agent at a given time, and is persisted in the DB backend. The state has all the information needed to recreate a persisted agent.\n\nParameters:\n    id (str): The unique identifier of the agent.\n    name (str): The name of the agent (must be unique to the user).\n    created_at (datetime): The datetime the agent was created.\n    message_ids (List[str]): The ids of the messages in the agent's in-context memory.\n    memory (Memory): The in-context memory of the agent.\n    tools (List[str]): The tools used by the agent. This includes any memory editing functions specified in `memory`.\n    system (str): The system prompt used by the agent.\n    llm_config (LLMConfig): The LLM configuration used by the agent.\n    embedding_config (EmbeddingConfig): The embedding configuration used by the agent."
      },
      "AgentType": {
        "type": "string",
        "enum": [
          "memgpt_agent",
          "split_thread_agent",
          "o1_agent",
          "offline_memory_agent",
          "chat_only_agent"
        ],
        "title": "AgentType",
        "description": "Enum to represent the type of agent."
      },
      "AppAuthScheme": {
        "properties": {
          "scheme_name": {
            "type": "string",
            "title": "Scheme Name"
          },
          "auth_mode": {
            "type": "string",
            "enum": [
              "OAUTH2",
              "OAUTH1",
              "API_KEY",
              "BASIC",
              "BEARER_TOKEN",
              "BASIC_WITH_JWT"
            ],
            "title": "Auth Mode"
          },
          "fields": {
            "items": {
              "$ref": "#/components/schemas/AuthSchemeField"
            },
            "type": "array",
            "title": "Fields"
          },
          "proxy": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Proxy"
          },
          "authorization_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Authorization Url"
          },
          "token_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Token Url"
          },
          "default_scopes": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Default Scopes"
          },
          "token_response_metadata": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Token Response Metadata"
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "scheme_name",
          "auth_mode",
          "fields"
        ],
        "title": "AppAuthScheme",
        "description": "App authenticatio scheme."
      },
      "AppModel": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "key": {
            "type": "string",
            "title": "Key"
          },
          "appId": {
            "type": "string",
            "title": "Appid"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "categories": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Categories"
          },
          "meta": {
            "type": "object",
            "title": "Meta"
          },
          "logo": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logo"
          },
          "docs": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Docs"
          },
          "group": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Group"
          },
          "status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status"
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "default": false
          },
          "no_auth": {
            "type": "boolean",
            "title": "No Auth",
            "default": false
          },
          "auth_schemes": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/AppAuthScheme"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Auth Schemes"
          },
          "testConnectors": {
            "anyOf": [
              {
                "items": {
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Testconnectors"
          },
          "documentation_doc_text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Documentation Doc Text"
          },
          "configuration_docs_text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Configuration Docs Text"
          }
        },
        "type": "object",
        "required": [
          "name",
          "key",
          "appId",
          "description",
          "categories",
          "meta"
        ],
        "title": "AppModel",
        "description": "App data model."
      },
      "ArchivalMemorySummary": {
        "properties": {
          "size": {
            "type": "integer",
            "title": "Size",
            "description": "Number of rows in archival memory"
          }
        },
        "type": "object",
        "required": [
          "size"
        ],
        "title": "ArchivalMemorySummary"
      },
      "AssistantFile": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the file."
          },
          "object": {
            "type": "string",
            "title": "Object",
            "default": "assistant.file"
          },
          "created_at": {
            "type": "integer",
            "title": "Created At",
            "description": "The unix timestamp of when the file was created."
          },
          "assistant_id": {
            "type": "string",
            "title": "Assistant Id",
            "description": "The unique identifier of the assistant."
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "assistant_id"
        ],
        "title": "AssistantFile"
      },
      "AssistantMessage-Input": {
        "properties": {
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content"
          },
          "role": {
            "type": "string",
            "title": "Role",
            "default": "assistant"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "tool_calls": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/letta__schemas__openai__chat_completion_request__ToolCall"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Calls"
          }
        },
        "type": "object",
        "title": "AssistantMessage"
      },
      "AssistantMessage-Output": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "title": "Date"
          },
          "message_type": {
            "type": "string",
            "enum": [
              "assistant_message"
            ],
            "const": "assistant_message",
            "title": "Message Type",
            "default": "assistant_message"
          },
          "assistant_message": {
            "type": "string",
            "title": "Assistant Message"
          }
        },
        "type": "object",
        "required": [
          "id",
          "date",
          "assistant_message"
        ],
        "title": "AssistantMessage"
      },
      "AuthRequest": {
        "properties": {
          "password": {
            "type": "string",
            "title": "Password",
            "description": "Admin password provided when starting the Letta server"
          }
        },
        "type": "object",
        "title": "AuthRequest"
      },
      "AuthResponse": {
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Uuid",
            "description": "UUID of the user"
          },
          "is_admin": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Admin",
            "description": "Whether the user is an admin"
          }
        },
        "type": "object",
        "required": [
          "uuid"
        ],
        "title": "AuthResponse"
      },
      "AuthSchemeField": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "display_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Display Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "default": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Default"
          },
          "required": {
            "type": "boolean",
            "title": "Required",
            "default": false
          },
          "expected_from_customer": {
            "type": "boolean",
            "title": "Expected From Customer",
            "default": true
          },
          "get_current_user_endpoint": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Get Current User Endpoint"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description",
          "type"
        ],
        "title": "AuthSchemeField",
        "description": "Auth scheme field."
      },
      "Block": {
        "properties": {
          "value": {
            "type": "string",
            "title": "Value",
            "description": "Value of the block."
          },
          "limit": {
            "type": "integer",
            "title": "Limit",
            "description": "Character limit of the block.",
            "default": 5000
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Name of the block if it is a template."
          },
          "is_template": {
            "type": "boolean",
            "title": "Is Template",
            "description": "Whether the block is a template (e.g. saved human/persona options).",
            "default": false
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "Label of the block (e.g. 'human', 'persona') in the context window."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the block."
          },
          "metadata_": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata ",
            "description": "Metadata of the block.",
            "default": {}
          },
          "id": {
            "type": "string",
            "pattern": "^block-[a-fA-F0-9]{8}",
            "title": "Id",
            "description": "The human-friendly ID of the Block",
            "examples": [
              "block-123e4567-e89b-12d3-a456-426614174000"
            ]
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The unique identifier of the organization associated with the block."
          },
          "created_by_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By Id",
            "description": "The id of the user that made this Block."
          },
          "last_updated_by_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated By Id",
            "description": "The id of the user that last updated this Block."
          }
        },
        "type": "object",
        "required": [
          "value"
        ],
        "title": "Block",
        "description": "A Block represents a reserved section of the LLM's context window which is editable. `Block` objects contained in the `Memory` object, which is able to edit the Block values.\n\nParameters:\n    label (str): The label of the block (e.g. 'human', 'persona'). This defines a category for the block.\n    value (str): The value of the block. This is the string that is represented in the context window.\n    limit (int): The character limit of the block.\n    is_template (bool): Whether the block is a template (e.g. saved human/persona options). Non-template blocks are not stored in the database and are ephemeral, while templated blocks are stored in the database.\n    label (str): The label of the block (e.g. 'human', 'persona'). This defines a category for the block.\n    template_name (str): The name of the block template (if it is a template).\n    description (str): Description of the block.\n    metadata_ (Dict): Metadata of the block.\n    user_id (str): The unique identifier of the user associated with the block."
      },
      "BlockUpdate": {
        "properties": {
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Value",
            "description": "Value of the block."
          },
          "limit": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit",
            "description": "Character limit of the block.",
            "default": 5000
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Name of the block if it is a template."
          },
          "is_template": {
            "type": "boolean",
            "title": "Is Template",
            "description": "Whether the block is a template (e.g. saved human/persona options).",
            "default": false
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label",
            "description": "Label of the block (e.g. 'human', 'persona') in the context window."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the block."
          },
          "metadata_": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata ",
            "description": "Metadata of the block.",
            "default": {}
          }
        },
        "type": "object",
        "title": "BlockUpdate",
        "description": "Update a block"
      },
      "Body_upload_file_to_source": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_upload_file_to_source"
      },
      "ChatCompletionRequest": {
        "properties": {
          "model": {
            "type": "string",
            "title": "Model"
          },
          "messages": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SystemMessage-Input"
                },
                {
                  "$ref": "#/components/schemas/UserMessage-Input"
                },
                {
                  "$ref": "#/components/schemas/AssistantMessage-Input"
                },
                {
                  "$ref": "#/components/schemas/ToolMessage"
                }
              ]
            },
            "type": "array",
            "title": "Messages"
          },
          "frequency_penalty": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Frequency Penalty",
            "default": 0
          },
          "logit_bias": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "integer"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logit Bias"
          },
          "logprobs": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logprobs",
            "default": false
          },
          "top_logprobs": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Top Logprobs"
          },
          "max_tokens": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Tokens"
          },
          "n": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "N",
            "default": 1
          },
          "presence_penalty": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Presence Penalty",
            "default": 0
          },
          "response_format": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ResponseFormat"
              },
              {
                "type": "null"
              }
            ]
          },
          "seed": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Seed"
          },
          "stop": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stop"
          },
          "stream": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stream",
            "default": false
          },
          "temperature": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Temperature",
            "default": 1
          },
          "top_p": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Top P",
            "default": 1
          },
          "user": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User"
          },
          "tools": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Tool-Input"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tools"
          },
          "tool_choice": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "none",
                  "auto",
                  "required"
                ]
              },
              {
                "$ref": "#/components/schemas/ToolFunctionChoice"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Choice"
          },
          "functions": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/FunctionSchema"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Functions"
          },
          "function_call": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "none",
                  "auto"
                ]
              },
              {
                "$ref": "#/components/schemas/FunctionCall-Input"
              },
              {
                "type": "null"
              }
            ],
            "title": "Function Call"
          }
        },
        "type": "object",
        "required": [
          "model",
          "messages"
        ],
        "title": "ChatCompletionRequest",
        "description": "https://platform.openai.com/docs/api-reference/chat/create"
      },
      "ChatCompletionResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "choices": {
            "items": {
              "$ref": "#/components/schemas/Choice"
            },
            "type": "array",
            "title": "Choices"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created"
          },
          "model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model"
          },
          "system_fingerprint": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "System Fingerprint"
          },
          "object": {
            "type": "string",
            "enum": [
              "chat.completion"
            ],
            "const": "chat.completion",
            "title": "Object",
            "default": "chat.completion"
          },
          "usage": {
            "$ref": "#/components/schemas/UsageStatistics"
          }
        },
        "type": "object",
        "required": [
          "id",
          "choices",
          "created",
          "usage"
        ],
        "title": "ChatCompletionResponse",
        "description": "https://platform.openai.com/docs/api-reference/chat/object"
      },
      "ChildToolRule": {
        "properties": {
          "tool_name": {
            "type": "string",
            "title": "Tool Name",
            "description": "The name of the tool. Must exist in the database for the user's organization."
          },
          "type": {
            "$ref": "#/components/schemas/ToolRuleType",
            "default": "ToolRule"
          },
          "children": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Children",
            "description": "The children tools that can be invoked."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "tool_name",
          "children"
        ],
        "title": "ChildToolRule",
        "description": "A ToolRule represents a tool that can be invoked by the agent."
      },
      "Choice": {
        "properties": {
          "finish_reason": {
            "type": "string",
            "title": "Finish Reason"
          },
          "index": {
            "type": "integer",
            "title": "Index"
          },
          "message": {
            "$ref": "#/components/schemas/letta__schemas__openai__chat_completion_response__Message"
          },
          "logprobs": {
            "anyOf": [
              {
                "additionalProperties": {
                  "anyOf": [
                    {
                      "items": {
                        "$ref": "#/components/schemas/MessageContentLogProb"
                      },
                      "type": "array"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logprobs"
          },
          "seed": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Seed"
          }
        },
        "type": "object",
        "required": [
          "finish_reason",
          "index",
          "message"
        ],
        "title": "Choice"
      },
      "ConditionalToolRule": {
        "properties": {
          "tool_name": {
            "type": "string",
            "title": "Tool Name",
            "description": "The name of the tool. Must exist in the database for the user's organization."
          },
          "type": {
            "$ref": "#/components/schemas/ToolRuleType",
            "default": "conditional"
          },
          "default_child": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Default Child",
            "description": "The default child tool to be called. If None, any tool can be called."
          },
          "child_output_mapping": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Child Output Mapping",
            "description": "The output case to check for mapping"
          },
          "require_output_mapping": {
            "type": "boolean",
            "title": "Require Output Mapping",
            "description": "Whether to throw an error when output doesn't match any case",
            "default": false
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "tool_name",
          "child_output_mapping"
        ],
        "title": "ConditionalToolRule",
        "description": "A ToolRule that conditionally maps to different child tools based on the output."
      },
      "ContextWindowOverview": {
        "properties": {
          "context_window_size_max": {
            "type": "integer",
            "title": "Context Window Size Max",
            "description": "The maximum amount of tokens the context window can hold."
          },
          "context_window_size_current": {
            "type": "integer",
            "title": "Context Window Size Current",
            "description": "The current number of tokens in the context window."
          },
          "num_messages": {
            "type": "integer",
            "title": "Num Messages",
            "description": "The number of messages in the context window."
          },
          "num_archival_memory": {
            "type": "integer",
            "title": "Num Archival Memory",
            "description": "The number of messages in the archival memory."
          },
          "num_recall_memory": {
            "type": "integer",
            "title": "Num Recall Memory",
            "description": "The number of messages in the recall memory."
          },
          "num_tokens_external_memory_summary": {
            "type": "integer",
            "title": "Num Tokens External Memory Summary",
            "description": "The number of tokens in the external memory summary (archival + recall metadata)."
          },
          "external_memory_summary": {
            "type": "string",
            "title": "External Memory Summary",
            "description": "The metadata summary of the external memory sources (archival + recall metadata)."
          },
          "num_tokens_system": {
            "type": "integer",
            "title": "Num Tokens System",
            "description": "The number of tokens in the system prompt."
          },
          "system_prompt": {
            "type": "string",
            "title": "System Prompt",
            "description": "The content of the system prompt."
          },
          "num_tokens_core_memory": {
            "type": "integer",
            "title": "Num Tokens Core Memory",
            "description": "The number of tokens in the core memory."
          },
          "core_memory": {
            "type": "string",
            "title": "Core Memory",
            "description": "The content of the core memory."
          },
          "num_tokens_summary_memory": {
            "type": "integer",
            "title": "Num Tokens Summary Memory",
            "description": "The number of tokens in the summary memory."
          },
          "summary_memory": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Summary Memory",
            "description": "The content of the summary memory."
          },
          "num_tokens_functions_definitions": {
            "type": "integer",
            "title": "Num Tokens Functions Definitions",
            "description": "The number of tokens in the functions definitions."
          },
          "functions_definitions": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/letta__schemas__openai__chat_completion_request__Tool"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Functions Definitions",
            "description": "The content of the functions definitions."
          },
          "num_tokens_messages": {
            "type": "integer",
            "title": "Num Tokens Messages",
            "description": "The number of tokens in the messages list."
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/letta__schemas__message__Message"
            },
            "type": "array",
            "title": "Messages",
            "description": "The messages in the context window."
          }
        },
        "type": "object",
        "required": [
          "context_window_size_max",
          "context_window_size_current",
          "num_messages",
          "num_archival_memory",
          "num_recall_memory",
          "num_tokens_external_memory_summary",
          "external_memory_summary",
          "num_tokens_system",
          "system_prompt",
          "num_tokens_core_memory",
          "core_memory",
          "num_tokens_summary_memory",
          "num_tokens_functions_definitions",
          "functions_definitions",
          "num_tokens_messages",
          "messages"
        ],
        "title": "ContextWindowOverview",
        "description": "Overview of the context window, including the number of messages and tokens."
      },
      "CreateAgentRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the agent."
          },
          "memory_blocks": {
            "items": {
              "$ref": "#/components/schemas/CreateBlock"
            },
            "type": "array",
            "title": "Memory Blocks",
            "description": "The blocks to create in the agent's in-context memory."
          },
          "tools": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tools",
            "description": "The tools used by the agent."
          },
          "tool_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Ids",
            "description": "The ids of the tools used by the agent."
          },
          "source_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Ids",
            "description": "The ids of the sources used by the agent."
          },
          "block_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Block Ids",
            "description": "The ids of the blocks used by the agent."
          },
          "tool_rules": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ChildToolRule"
                    },
                    {
                      "$ref": "#/components/schemas/InitToolRule"
                    },
                    {
                      "$ref": "#/components/schemas/TerminalToolRule"
                    },
                    {
                      "$ref": "#/components/schemas/ConditionalToolRule"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Rules",
            "description": "The tool rules governing the agent."
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "description": "The tags associated with the agent."
          },
          "system": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "System",
            "description": "The system prompt used by the agent."
          },
          "agent_type": {
            "$ref": "#/components/schemas/AgentType",
            "description": "The type of agent."
          },
          "llm_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LLMConfig"
              },
              {
                "type": "null"
              }
            ],
            "description": "The LLM configuration used by the agent."
          },
          "embedding_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EmbeddingConfig"
              },
              {
                "type": "null"
              }
            ],
            "description": "The embedding configuration used by the agent."
          },
          "initial_message_sequence": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/MessageCreate"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Initial Message Sequence",
            "description": "The initial set of messages to put in the agent's in-context memory."
          },
          "include_base_tools": {
            "type": "boolean",
            "title": "Include Base Tools",
            "description": "The LLM configuration used by the agent.",
            "default": true
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the agent."
          },
          "metadata_": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata ",
            "description": "The metadata of the agent."
          },
          "llm": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Llm",
            "description": "The LLM configuration handle used by the agent, specified in the format provider/model-name, as an alternative to specifying llm_config."
          },
          "embedding": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embedding",
            "description": "The embedding configuration handle used by the agent, specified in the format provider/model-name."
          },
          "context_window_limit": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Context Window Limit",
            "description": "The context window limit used by the agent."
          },
          "embedding_chunk_size": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embedding Chunk Size",
            "description": "The embedding chunk size used by the agent.",
            "default": 300
          },
          "from_template": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "From Template",
            "description": "The template id used to configure the agent"
          },
          "project_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Project Id",
            "description": "The project id that the agent will be associated with."
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          }
        },
        "type": "object",
        "required": [
          "memory_blocks"
        ],
        "title": "CreateAgentRequest",
        "description": "CreateAgent model specifically for POST request body, excluding user_id which comes from headers"
      },
      "CreateArchivalMemory": {
        "properties": {
          "text": {
            "type": "string",
            "title": "Text",
            "description": "Text to write to archival memory."
          }
        },
        "type": "object",
        "required": [
          "text"
        ],
        "title": "CreateArchivalMemory"
      },
      "CreateAssistantFileRequest": {
        "properties": {
          "file_id": {
            "type": "string",
            "title": "File Id",
            "description": "The unique identifier of the file."
          }
        },
        "type": "object",
        "required": [
          "file_id"
        ],
        "title": "CreateAssistantFileRequest"
      },
      "CreateAssistantRequest": {
        "properties": {
          "model": {
            "type": "string",
            "title": "Model",
            "description": "The model to use for the assistant."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the assistant."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the assistant."
          },
          "instructions": {
            "type": "string",
            "title": "Instructions",
            "description": "The instructions for the assistant."
          },
          "tools": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tools",
            "description": "The tools used by the assistant."
          },
          "file_ids": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "File Ids",
            "description": "List of file IDs associated with the assistant."
          },
          "metadata": {
            "type": "object",
            "title": "Metadata",
            "description": "Metadata associated with the assistant."
          },
          "embedding_model": {
            "type": "string",
            "title": "Embedding Model",
            "description": "The model to use for the assistant."
          }
        },
        "type": "object",
        "required": [
          "model",
          "name",
          "instructions"
        ],
        "title": "CreateAssistantRequest"
      },
      "CreateBlock": {
        "properties": {
          "value": {
            "type": "string",
            "title": "Value",
            "description": "Value of the block."
          },
          "limit": {
            "type": "integer",
            "title": "Limit",
            "description": "Character limit of the block.",
            "default": 5000
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Name of the block if it is a template."
          },
          "is_template": {
            "type": "boolean",
            "title": "Is Template",
            "default": false
          },
          "label": {
            "type": "string",
            "title": "Label",
            "description": "Label of the block."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the block."
          },
          "metadata_": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata ",
            "description": "Metadata of the block.",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "value",
          "label"
        ],
        "title": "CreateBlock",
        "description": "Create a block"
      },
      "DeleteAssistantFileResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the file."
          },
          "object": {
            "type": "string",
            "title": "Object",
            "default": "assistant.file.deleted"
          },
          "deleted": {
            "type": "boolean",
            "title": "Deleted",
            "description": "Whether the file was deleted."
          }
        },
        "type": "object",
        "required": [
          "id",
          "deleted"
        ],
        "title": "DeleteAssistantFileResponse"
      },
      "DeleteAssistantResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the agent."
          },
          "object": {
            "type": "string",
            "title": "Object",
            "default": "assistant.deleted"
          },
          "deleted": {
            "type": "boolean",
            "title": "Deleted",
            "description": "Whether the agent was deleted."
          }
        },
        "type": "object",
        "required": [
          "id",
          "deleted"
        ],
        "title": "DeleteAssistantResponse"
      },
      "E2BSandboxConfig": {
        "properties": {
          "timeout": {
            "type": "integer",
            "title": "Timeout",
            "description": "Time limit for the sandbox (in seconds).",
            "default": 300
          },
          "template": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Template",
            "description": "The E2B template id (docker image)."
          },
          "pip_requirements": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pip Requirements",
            "description": "A list of pip packages to install on the E2B Sandbox"
          }
        },
        "type": "object",
        "title": "E2BSandboxConfig"
      },
      "EmbeddingConfig": {
        "properties": {
          "embedding_endpoint_type": {
            "type": "string",
            "enum": [
              "openai",
              "anthropic",
              "cohere",
              "google_ai",
              "azure",
              "groq",
              "ollama",
              "webui",
              "webui-legacy",
              "lmstudio",
              "lmstudio-legacy",
              "llamacpp",
              "koboldcpp",
              "vllm",
              "hugging-face",
              "mistral",
              "together"
            ],
            "title": "Embedding Endpoint Type",
            "description": "The endpoint type for the model."
          },
          "embedding_endpoint": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embedding Endpoint",
            "description": "The endpoint for the model (`None` if local)."
          },
          "embedding_model": {
            "type": "string",
            "title": "Embedding Model",
            "description": "The model for the embedding."
          },
          "embedding_dim": {
            "type": "integer",
            "title": "Embedding Dim",
            "description": "The dimension of the embedding."
          },
          "embedding_chunk_size": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embedding Chunk Size",
            "description": "The chunk size of the embedding.",
            "default": 300
          },
          "handle": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Handle",
            "description": "The handle for this config, in the format provider/model-name."
          },
          "azure_endpoint": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Azure Endpoint",
            "description": "The Azure endpoint for the model."
          },
          "azure_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Azure Version",
            "description": "The Azure version for the model."
          },
          "azure_deployment": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Azure Deployment",
            "description": "The Azure deployment for the model."
          }
        },
        "type": "object",
        "required": [
          "embedding_endpoint_type",
          "embedding_model",
          "embedding_dim"
        ],
        "title": "EmbeddingConfig",
        "description": "Embedding model configuration. This object specifies all the information necessary to access an embedding model to usage with Letta, except for secret keys.\n\nAttributes:\n    embedding_endpoint_type (str): The endpoint type for the model.\n    embedding_endpoint (str): The endpoint for the model.\n    embedding_model (str): The model for the embedding.\n    embedding_dim (int): The dimension of the embedding.\n    embedding_chunk_size (int): The chunk size of the embedding.\n    azure_endpoint (:obj:`str`, optional): The Azure endpoint for the model (Azure only).\n    azure_version (str): The Azure version for the model (Azure only).\n    azure_deployment (str): The Azure deployment for the model (Azure only)."
      },
      "FileMetadata": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^file-[a-fA-F0-9]{8}",
            "title": "Id",
            "description": "The human-friendly ID of the File",
            "examples": [
              "file-123e4567-e89b-12d3-a456-426614174000"
            ]
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The unique identifier of the organization associated with the document."
          },
          "source_id": {
            "type": "string",
            "title": "Source Id",
            "description": "The unique identifier of the source associated with the document."
          },
          "file_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Name",
            "description": "The name of the file."
          },
          "file_path": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Path",
            "description": "The path to the file."
          },
          "file_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Type",
            "description": "The type of the file (MIME type)."
          },
          "file_size": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Size",
            "description": "The size of the file in bytes."
          },
          "file_creation_date": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Creation Date",
            "description": "The creation date of the file."
          },
          "file_last_modified_date": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Last Modified Date",
            "description": "The last modified date of the file."
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "The creation date of the file."
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "The update date of the file."
          },
          "is_deleted": {
            "type": "boolean",
            "title": "Is Deleted",
            "description": "Whether this file is deleted or not.",
            "default": false
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "source_id"
        ],
        "title": "FileMetadata",
        "description": "Representation of a single FileMetadata"
      },
      "FunctionCall-Input": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "FunctionCall"
      },
      "FunctionCall-Output": {
        "properties": {
          "arguments": {
            "type": "string",
            "title": "Arguments"
          },
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "arguments",
          "name"
        ],
        "title": "FunctionCall"
      },
      "FunctionSchema": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "parameters": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parameters"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "FunctionSchema"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Health": {
        "properties": {
          "version": {
            "type": "string",
            "title": "Version"
          },
          "status": {
            "type": "string",
            "title": "Status"
          }
        },
        "type": "object",
        "required": [
          "version",
          "status"
        ],
        "title": "Health",
        "description": "Health check response body"
      },
      "InitToolRule": {
        "properties": {
          "tool_name": {
            "type": "string",
            "title": "Tool Name",
            "description": "The name of the tool. Must exist in the database for the user's organization."
          },
          "type": {
            "$ref": "#/components/schemas/ToolRuleType",
            "default": "InitToolRule"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "tool_name"
        ],
        "title": "InitToolRule",
        "description": "Represents the initial tool rule configuration."
      },
      "Job": {
        "properties": {
          "created_by_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By Id",
            "description": "The id of the user that made this object."
          },
          "last_updated_by_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated By Id",
            "description": "The id of the user that made this object."
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "The timestamp when the object was created."
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "The timestamp when the object was last updated."
          },
          "status": {
            "$ref": "#/components/schemas/JobStatus",
            "description": "The status of the job.",
            "default": "created"
          },
          "completed_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Completed At",
            "description": "The unix timestamp of when the job was completed."
          },
          "metadata_": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata ",
            "description": "The metadata of the job."
          },
          "id": {
            "type": "string",
            "pattern": "^job-[a-fA-F0-9]{8}",
            "title": "Id",
            "description": "The human-friendly ID of the Job",
            "examples": [
              "job-123e4567-e89b-12d3-a456-426614174000"
            ]
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id",
            "description": "The unique identifier of the user associated with the job."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "Job",
        "description": "Representation of offline jobs, used for tracking status of data loading tasks (involving parsing and embedding files).\n\nParameters:\n    id (str): The unique identifier of the job.\n    status (JobStatus): The status of the job.\n    created_at (datetime): The unix timestamp of when the job was created.\n    completed_at (datetime): The unix timestamp of when the job was completed.\n    user_id (str): The unique identifier of the user associated with the."
      },
      "JobStatus": {
        "type": "string",
        "enum": [
          "created",
          "running",
          "completed",
          "failed",
          "pending"
        ],
        "title": "JobStatus",
        "description": "Status of the job."
      },
      "LLMConfig": {
        "properties": {
          "model": {
            "type": "string",
            "title": "Model",
            "description": "LLM model name. "
          },
          "model_endpoint_type": {
            "type": "string",
            "enum": [
              "openai",
              "anthropic",
              "cohere",
              "google_ai",
              "azure",
              "groq",
              "ollama",
              "webui",
              "webui-legacy",
              "lmstudio",
              "lmstudio-legacy",
              "llamacpp",
              "koboldcpp",
              "vllm",
              "hugging-face",
              "mistral",
              "together"
            ],
            "title": "Model Endpoint Type",
            "description": "The endpoint type for the model."
          },
          "model_endpoint": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model Endpoint",
            "description": "The endpoint for the model."
          },
          "model_wrapper": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model Wrapper",
            "description": "The wrapper for the model."
          },
          "context_window": {
            "type": "integer",
            "title": "Context Window",
            "description": "The context window size for the model."
          },
          "put_inner_thoughts_in_kwargs": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Put Inner Thoughts In Kwargs",
            "description": "Puts 'inner_thoughts' as a kwarg in the function call if this is set to True. This helps with function calling performance and also the generation of inner thoughts.",
            "default": true
          },
          "handle": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Handle",
            "description": "The handle for this config, in the format provider/model-name."
          }
        },
        "type": "object",
        "required": [
          "model",
          "model_endpoint_type",
          "context_window"
        ],
        "title": "LLMConfig",
        "description": "Configuration for a Language Model (LLM) model. This object specifies all the information necessary to access an LLM model to usage with Letta, except for secret keys.\n\nAttributes:\n    model (str): The name of the LLM model.\n    model_endpoint_type (str): The endpoint type for the model.\n    model_endpoint (str): The endpoint for the model.\n    model_wrapper (str): The wrapper for the model. This is used to wrap additional text around the input/output of the model. This is useful for text-to-text completions, such as the Completions API in OpenAI.\n    context_window (int): The context window size for the model.\n    put_inner_thoughts_in_kwargs (bool): Puts `inner_thoughts` as a kwarg in the function call if this is set to True. This helps with function calling performance and also the generation of inner thoughts."
      },
      "LettaRequest": {
        "properties": {
          "messages": {
            "items": {
              "$ref": "#/components/schemas/MessageCreate"
            },
            "type": "array",
            "title": "Messages",
            "description": "The messages to be sent to the agent."
          },
          "assistant_message_tool_name": {
            "type": "string",
            "title": "Assistant Message Tool Name",
            "description": "The name of the designated message tool.",
            "default": "send_message"
          },
          "assistant_message_tool_kwarg": {
            "type": "string",
            "title": "Assistant Message Tool Kwarg",
            "description": "The name of the message argument in the designated message tool.",
            "default": "message"
          }
        },
        "type": "object",
        "required": [
          "messages"
        ],
        "title": "LettaRequest"
      },
      "LettaResponse": {
        "properties": {
          "messages": {
            "items": {
              "oneOf": [
                {
                  "x-ref-name": "SystemMessage"
                },
                {
                  "x-ref-name": "UserMessage"
                },
                {
                  "x-ref-name": "ReasoningMessage"
                },
                {
                  "x-ref-name": "ToolCallMessage"
                },
                {
                  "x-ref-name": "ToolReturnMessage"
                },
                {
                  "x-ref-name": "AssistantMessage"
                }
              ],
              "discriminator": {
                "propertyName": "message_type"
              }
            },
            "type": "array",
            "title": "Messages",
            "description": "The messages returned by the agent."
          },
          "usage": {
            "$ref": "#/components/schemas/LettaUsageStatistics",
            "description": "The usage statistics of the agent.",
            "x-ref-name": "LettaUsageStatistics"
          }
        },
        "type": "object",
        "required": [
          "messages",
          "usage"
        ],
        "title": "LettaResponse",
        "description": "Response object from an agent interaction, consisting of the new messages generated by the agent and usage statistics.\nThe type of the returned messages can be either `Message` or `LettaMessage`, depending on what was specified in the request.\n\nAttributes:\n    messages (List[Union[Message, LettaMessage]]): The messages returned by the agent.\n    usage (LettaUsageStatistics): The usage statistics"
      },
      "LettaStreamingRequest": {
        "properties": {
          "messages": {
            "items": {
              "$ref": "#/components/schemas/MessageCreate"
            },
            "type": "array",
            "title": "Messages",
            "description": "The messages to be sent to the agent."
          },
          "assistant_message_tool_name": {
            "type": "string",
            "title": "Assistant Message Tool Name",
            "description": "The name of the designated message tool.",
            "default": "send_message"
          },
          "assistant_message_tool_kwarg": {
            "type": "string",
            "title": "Assistant Message Tool Kwarg",
            "description": "The name of the message argument in the designated message tool.",
            "default": "message"
          },
          "stream_tokens": {
            "type": "boolean",
            "title": "Stream Tokens",
            "description": "Flag to determine if individual tokens should be streamed. Set to True for token streaming (requires stream_steps = True).",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "messages"
        ],
        "title": "LettaStreamingRequest"
      },
      "LettaUsageStatistics": {
        "properties": {
          "message_type": {
            "type": "string",
            "enum": [
              "usage_statistics"
            ],
            "const": "usage_statistics",
            "title": "Message Type",
            "default": "usage_statistics"
          },
          "completion_tokens": {
            "type": "integer",
            "title": "Completion Tokens",
            "description": "The number of tokens generated by the agent.",
            "default": 0
          },
          "prompt_tokens": {
            "type": "integer",
            "title": "Prompt Tokens",
            "description": "The number of tokens in the prompt.",
            "default": 0
          },
          "total_tokens": {
            "type": "integer",
            "title": "Total Tokens",
            "description": "The total number of tokens processed by the agent.",
            "default": 0
          },
          "step_count": {
            "type": "integer",
            "title": "Step Count",
            "description": "The number of steps taken by the agent.",
            "default": 0
          }
        },
        "type": "object",
        "title": "LettaUsageStatistics",
        "description": "Usage statistics for the agent interaction.\n\nAttributes:\n    completion_tokens (int): The number of tokens generated by the agent.\n    prompt_tokens (int): The number of tokens in the prompt.\n    total_tokens (int): The total number of tokens processed by the agent.\n    step_count (int): The number of steps taken by the agent."
      },
      "LocalSandboxConfig": {
        "properties": {
          "sandbox_dir": {
            "type": "string",
            "title": "Sandbox Dir",
            "description": "Directory for the sandbox environment."
          },
          "use_venv": {
            "type": "boolean",
            "title": "Use Venv",
            "description": "Whether or not to use the venv, or run directly in the same run loop.",
            "default": false
          },
          "venv_name": {
            "type": "string",
            "title": "Venv Name",
            "description": "The name for the venv in the sandbox directory. We first search for an existing venv with this name, otherwise, we make it from the requirements.txt.",
            "default": "venv"
          }
        },
        "type": "object",
        "required": [
          "sandbox_dir"
        ],
        "title": "LocalSandboxConfig"
      },
      "LogProbToken": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          },
          "logprob": {
            "type": "number",
            "title": "Logprob"
          },
          "bytes": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bytes"
          }
        },
        "type": "object",
        "required": [
          "token",
          "logprob",
          "bytes"
        ],
        "title": "LogProbToken"
      },
      "Memory": {
        "properties": {
          "blocks": {
            "items": {
              "$ref": "#/components/schemas/Block"
            },
            "type": "array",
            "title": "Blocks",
            "description": "Memory blocks contained in the agent's in-context memory"
          },
          "prompt_template": {
            "type": "string",
            "title": "Prompt Template",
            "description": "Jinja2 template for compiling memory blocks into a prompt string",
            "default": "{% for block in blocks %}<{{ block.label }} characters=\"{{ block.value|length }}/{{ block.limit }}\">\n{{ block.value }}\n</{{ block.label }}>{% if not loop.last %}\n{% endif %}{% endfor %}"
          }
        },
        "type": "object",
        "required": [
          "blocks"
        ],
        "title": "Memory",
        "description": "Represents the in-context memory (i.e. Core memory) of the agent. This includes both the `Block` objects (labelled by sections), as well as tools to edit the blocks."
      },
      "MessageContentLogProb": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          },
          "logprob": {
            "type": "number",
            "title": "Logprob"
          },
          "bytes": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bytes"
          },
          "top_logprobs": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/LogProbToken"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Top Logprobs"
          }
        },
        "type": "object",
        "required": [
          "token",
          "logprob",
          "bytes",
          "top_logprobs"
        ],
        "title": "MessageContentLogProb"
      },
      "MessageCreate": {
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "user",
              "system"
            ],
            "title": "Role",
            "description": "The role of the participant."
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "The text of the message."
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the participant."
          }
        },
        "type": "object",
        "required": [
          "role",
          "text"
        ],
        "title": "MessageCreate",
        "description": "Request to create a message"
      },
      "MessageRole": {
        "type": "string",
        "enum": [
          "assistant",
          "user",
          "tool",
          "function",
          "system"
        ],
        "title": "MessageRole"
      },
      "MessageUpdate": {
        "properties": {
          "role": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MessageRole"
              },
              {
                "type": "null"
              }
            ],
            "description": "The role of the participant."
          },
          "text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text",
            "description": "The text of the message."
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the participant."
          },
          "tool_calls": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/letta__schemas__openai__chat_completions__ToolCall-Input"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Calls",
            "description": "The list of tool calls requested."
          },
          "tool_call_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Call Id",
            "description": "The id of the tool call."
          }
        },
        "type": "object",
        "title": "MessageUpdate",
        "description": "Request to update a message"
      },
      "OpenAIAssistant": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The unique identifier of the assistant."
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the assistant."
          },
          "object": {
            "type": "string",
            "title": "Object",
            "default": "assistant"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the assistant."
          },
          "created_at": {
            "type": "integer",
            "title": "Created At",
            "description": "The unix timestamp of when the assistant was created."
          },
          "model": {
            "type": "string",
            "title": "Model",
            "description": "The model used by the assistant."
          },
          "instructions": {
            "type": "string",
            "title": "Instructions",
            "description": "The instructions for the assistant."
          },
          "tools": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tools",
            "description": "The tools used by the assistant."
          },
          "file_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Ids",
            "description": "List of file IDs associated with the assistant."
          },
          "metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata",
            "description": "Metadata associated with the assistant."
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "created_at",
          "model",
          "instructions"
        ],
        "title": "OpenAIAssistant",
        "description": "Represents an OpenAI assistant (equivalent to Letta preset)"
      },
      "Organization": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^org-[a-fA-F0-9]{8}",
            "title": "Id",
            "description": "The human-friendly ID of the Org",
            "examples": [
              "org-123e4567-e89b-12d3-a456-426614174000"
            ]
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the organization.",
            "default": "SincereYogurt"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "The creation date of the organization."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "Organization"
      },
      "OrganizationCreate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the organization."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "OrganizationCreate"
      },
      "Passage": {
        "properties": {
          "created_by_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By Id",
            "description": "The id of the user that made this object."
          },
          "last_updated_by_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated By Id",
            "description": "The id of the user that made this object."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The creation date of the passage."
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "The timestamp when the object was last updated."
          },
          "is_deleted": {
            "type": "boolean",
            "title": "Is Deleted",
            "description": "Whether this passage is deleted or not.",
            "default": false
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The unique identifier of the user associated with the passage."
          },
          "agent_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Id",
            "description": "The unique identifier of the agent associated with the passage."
          },
          "source_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Id",
            "description": "The data source of the passage."
          },
          "file_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "File Id",
            "description": "The unique identifier of the file associated with the passage."
          },
          "metadata_": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata ",
            "description": "The metadata of the passage.",
            "default": {}
          },
          "id": {
            "type": "string",
            "pattern": "^passage-[a-fA-F0-9]{8}",
            "title": "Id",
            "description": "The human-friendly ID of the Passage",
            "examples": [
              "passage-123e4567-e89b-12d3-a456-426614174000"
            ]
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "The text of the passage."
          },
          "embedding": {
            "anyOf": [
              {
                "items": {
                  "type": "number"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Embedding",
            "description": "The embedding of the passage."
          },
          "embedding_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EmbeddingConfig"
              },
              {
                "type": "null"
              }
            ],
            "description": "The embedding configuration used by the passage."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "text",
          "embedding",
          "embedding_config"
        ],
        "title": "Passage",
        "description": "Representation of a passage, which is stored in archival memory.\n\nParameters:\n    text (str): The text of the passage.\n    embedding (List[float]): The embedding of the passage.\n    embedding_config (EmbeddingConfig): The embedding configuration used by the passage.\n    created_at (datetime): The creation date of the passage.\n    user_id (str): The unique identifier of the user associated with the passage.\n    agent_id (str): The unique identifier of the agent associated with the passage.\n    source_id (str): The data source of the passage.\n    file_id (str): The unique identifier of the file associated with the passage."
      },
      "ReasoningMessage": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "title": "Date"
          },
          "message_type": {
            "type": "string",
            "enum": [
              "reasoning_message"
            ],
            "const": "reasoning_message",
            "title": "Message Type",
            "default": "reasoning_message"
          },
          "reasoning": {
            "type": "string",
            "title": "Reasoning"
          }
        },
        "type": "object",
        "required": [
          "id",
          "date",
          "reasoning"
        ],
        "title": "ReasoningMessage",
        "description": "Representation of an agent's internal reasoning.\n\nAttributes:\n    reasoning (str): The internal reasoning of the agent\n    id (str): The ID of the message\n    date (datetime): The date the message was created in ISO format"
      },
      "RecallMemorySummary": {
        "properties": {
          "size": {
            "type": "integer",
            "title": "Size",
            "description": "Number of rows in recall memory"
          }
        },
        "type": "object",
        "required": [
          "size"
        ],
        "title": "RecallMemorySummary"
      },
      "ResponseFormat": {
        "properties": {
          "type": {
            "type": "string",
            "pattern": "^(text|json_object)$",
            "title": "Type",
            "default": "text"
          }
        },
        "type": "object",
        "title": "ResponseFormat"
      },
      "SandboxConfig": {
        "properties": {
          "created_by_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By Id",
            "description": "The id of the user that made this object."
          },
          "last_updated_by_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated By Id",
            "description": "The id of the user that made this object."
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "The timestamp when the object was created."
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "The timestamp when the object was last updated."
          },
          "id": {
            "type": "string",
            "pattern": "^sandbox-[a-fA-F0-9]{8}",
            "title": "Id",
            "description": "The human-friendly ID of the Sandbox",
            "examples": [
              "sandbox-123e4567-e89b-12d3-a456-426614174000"
            ]
          },
          "type": {
            "$ref": "#/components/schemas/SandboxType",
            "description": "The type of sandbox."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The unique identifier of the organization associated with the sandbox."
          },
          "config": {
            "type": "object",
            "title": "Config",
            "description": "The JSON sandbox settings data."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "SandboxConfig"
      },
      "SandboxConfigCreate": {
        "properties": {
          "config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LocalSandboxConfig"
              },
              {
                "$ref": "#/components/schemas/E2BSandboxConfig"
              }
            ],
            "title": "Config",
            "description": "The configuration for the sandbox."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "config"
        ],
        "title": "SandboxConfigCreate"
      },
      "SandboxConfigUpdate": {
        "properties": {
          "config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LocalSandboxConfig"
              },
              {
                "$ref": "#/components/schemas/E2BSandboxConfig"
              }
            ],
            "title": "Config",
            "description": "The JSON configuration data for the sandbox."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "SandboxConfigUpdate",
        "description": "Pydantic model for updating SandboxConfig fields."
      },
      "SandboxEnvironmentVariable": {
        "properties": {
          "created_by_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By Id",
            "description": "The id of the user that made this object."
          },
          "last_updated_by_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated By Id",
            "description": "The id of the user that made this object."
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "The timestamp when the object was created."
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "The timestamp when the object was last updated."
          },
          "id": {
            "type": "string",
            "pattern": "^sandbox-env-[a-fA-F0-9]{8}",
            "title": "Id",
            "description": "The human-friendly ID of the Sandbox-env",
            "examples": [
              "sandbox-env-123e4567-e89b-12d3-a456-426614174000"
            ]
          },
          "key": {
            "type": "string",
            "title": "Key",
            "description": "The name of the environment variable."
          },
          "value": {
            "type": "string",
            "title": "Value",
            "description": "The value of the environment variable."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "An optional description of the environment variable."
          },
          "sandbox_config_id": {
            "type": "string",
            "title": "Sandbox Config Id",
            "description": "The ID of the sandbox config this environment variable belongs to."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization this environment variable belongs to."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "key",
          "value",
          "sandbox_config_id"
        ],
        "title": "SandboxEnvironmentVariable"
      },
      "SandboxEnvironmentVariableCreate": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key",
            "description": "The name of the environment variable."
          },
          "value": {
            "type": "string",
            "title": "Value",
            "description": "The value of the environment variable."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "An optional description of the environment variable."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "title": "SandboxEnvironmentVariableCreate"
      },
      "SandboxEnvironmentVariableUpdate": {
        "properties": {
          "key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Key",
            "description": "The name of the environment variable."
          },
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Value",
            "description": "The value of the environment variable."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "An optional description of the environment variable."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "SandboxEnvironmentVariableUpdate",
        "description": "Pydantic model for updating SandboxEnvironmentVariable fields."
      },
      "SandboxType": {
        "type": "string",
        "enum": [
          "e2b",
          "local"
        ],
        "title": "SandboxType"
      },
      "Source": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^source-[a-fA-F0-9]{8}",
            "title": "Id",
            "description": "The human-friendly ID of the Source",
            "examples": [
              "source-123e4567-e89b-12d3-a456-426614174000"
            ]
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the source."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the source."
          },
          "embedding_config": {
            "$ref": "#/components/schemas/EmbeddingConfig",
            "description": "The embedding configuration used by the source."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The ID of the organization that created the source."
          },
          "metadata_": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata ",
            "description": "Metadata associated with the source."
          },
          "created_by_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By Id",
            "description": "The id of the user that made this Tool."
          },
          "last_updated_by_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated By Id",
            "description": "The id of the user that made this Tool."
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "The timestamp when the source was created."
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "The timestamp when the source was last updated."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "name",
          "embedding_config"
        ],
        "title": "Source",
        "description": "Representation of a source, which is a collection of files and passages.\n\nParameters:\n    id (str): The ID of the source\n    name (str): The name of the source.\n    embedding_config (EmbeddingConfig): The embedding configuration used by the source.\n    user_id (str): The ID of the user that created the source.\n    metadata_ (dict): Metadata associated with the source.\n    description (str): The description of the source."
      },
      "SourceCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the source."
          },
          "embedding_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EmbeddingConfig"
              },
              {
                "type": "null"
              }
            ],
            "description": "The embedding configuration used by the source."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the source."
          },
          "metadata_": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata ",
            "description": "Metadata associated with the source."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "name"
        ],
        "title": "SourceCreate",
        "description": "Schema for creating a new Source."
      },
      "SourceUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the source."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the source."
          },
          "metadata_": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata ",
            "description": "Metadata associated with the source."
          },
          "embedding_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EmbeddingConfig"
              },
              {
                "type": "null"
              }
            ],
            "description": "The embedding configuration used by the source."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "SourceUpdate",
        "description": "Schema for updating an existing Source."
      },
      "SystemMessage-Input": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content"
          },
          "role": {
            "type": "string",
            "title": "Role",
            "default": "system"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "SystemMessage"
      },
      "SystemMessage-Output": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "title": "Date"
          },
          "message_type": {
            "type": "string",
            "enum": [
              "system_message"
            ],
            "const": "system_message",
            "title": "Message Type",
            "default": "system_message"
          },
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "id",
          "date",
          "message"
        ],
        "title": "SystemMessage",
        "description": "A message generated by the system. Never streamed back on a response, only used for cursor pagination.\n\nAttributes:\n    message (str): The message sent by the system\n    id (str): The ID of the message\n    date (datetime): The date the message was created in ISO format"
      },
      "TerminalToolRule": {
        "properties": {
          "tool_name": {
            "type": "string",
            "title": "Tool Name",
            "description": "The name of the tool. Must exist in the database for the user's organization."
          },
          "type": {
            "$ref": "#/components/schemas/ToolRuleType",
            "default": "TerminalToolRule"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "tool_name"
        ],
        "title": "TerminalToolRule",
        "description": "Represents a terminal tool rule configuration where if this tool gets called, it must end the agent loop."
      },
      "Tool-Input": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "const": "function",
            "title": "Type",
            "default": "function"
          },
          "function": {
            "$ref": "#/components/schemas/FunctionSchema"
          }
        },
        "type": "object",
        "required": [
          "function"
        ],
        "title": "Tool"
      },
      "ToolCallDelta": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "arguments": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Arguments"
          },
          "tool_call_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Call Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "arguments",
          "tool_call_id"
        ],
        "title": "ToolCallDelta"
      },
      "ToolCallFunction-Output": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the function to call"
          },
          "arguments": {
            "type": "string",
            "title": "Arguments",
            "description": "The arguments to pass to the function (JSON dump)"
          }
        },
        "type": "object",
        "required": [
          "name",
          "arguments"
        ],
        "title": "ToolCallFunction"
      },
      "ToolCallMessage": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "title": "Date"
          },
          "message_type": {
            "type": "string",
            "enum": [
              "tool_call_message"
            ],
            "const": "tool_call_message",
            "title": "Message Type",
            "default": "tool_call_message"
          },
          "tool_call": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/letta__schemas__letta_message__ToolCall"
              },
              {
                "$ref": "#/components/schemas/ToolCallDelta"
              }
            ],
            "title": "Tool Call"
          }
        },
        "type": "object",
        "required": [
          "id",
          "date",
          "tool_call"
        ],
        "title": "ToolCallMessage",
        "description": "A message representing a request to call a tool (generated by the LLM to trigger tool execution).\n\nAttributes:\n    tool_call (Union[ToolCall, ToolCallDelta]): The tool call\n    id (str): The ID of the message\n    date (datetime): The date the message was created in ISO format"
      },
      "ToolCreate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the function (auto-generated from source_code if not provided)."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the tool."
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "Metadata tags.",
            "default": []
          },
          "module": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Module",
            "description": "The source code of the function."
          },
          "source_code": {
            "type": "string",
            "title": "Source Code",
            "description": "The source code of the function."
          },
          "source_type": {
            "type": "string",
            "title": "Source Type",
            "description": "The source type of the function.",
            "default": "python"
          },
          "json_schema": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Json Schema",
            "description": "The JSON schema of the function (auto-generated from source_code if not provided)"
          },
          "return_char_limit": {
            "type": "integer",
            "title": "Return Char Limit",
            "description": "The maximum number of characters in the response.",
            "default": 6000
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "source_code"
        ],
        "title": "ToolCreate"
      },
      "ToolFunctionChoice": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "const": "function",
            "title": "Type",
            "default": "function"
          },
          "function": {
            "$ref": "#/components/schemas/FunctionCall-Input"
          }
        },
        "type": "object",
        "required": [
          "function"
        ],
        "title": "ToolFunctionChoice"
      },
      "ToolMessage": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content"
          },
          "role": {
            "type": "string",
            "title": "Role",
            "default": "tool"
          },
          "tool_call_id": {
            "type": "string",
            "title": "Tool Call Id"
          }
        },
        "type": "object",
        "required": [
          "content",
          "tool_call_id"
        ],
        "title": "ToolMessage"
      },
      "ToolReturnMessage": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "title": "Date"
          },
          "message_type": {
            "type": "string",
            "enum": [
              "tool_return_message"
            ],
            "const": "tool_return_message",
            "title": "Message Type",
            "default": "tool_return_message"
          },
          "tool_return": {
            "type": "string",
            "title": "Tool Return"
          },
          "status": {
            "type": "string",
            "enum": [
              "success",
              "error"
            ],
            "title": "Status"
          },
          "tool_call_id": {
            "type": "string",
            "title": "Tool Call Id"
          },
          "stdout": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stdout"
          },
          "stderr": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stderr"
          }
        },
        "type": "object",
        "required": [
          "id",
          "date",
          "tool_return",
          "status",
          "tool_call_id"
        ],
        "title": "ToolReturnMessage",
        "description": "A message representing the return value of a tool call (generated by Letta executing the requested tool).\n\nAttributes:\n    tool_return (str): The return value of the tool\n    status (Literal[\"success\", \"error\"]): The status of the tool call\n    id (str): The ID of the message\n    date (datetime): The date the message was created in ISO format\n    tool_call_id (str): A unique identifier for the tool call that generated this message\n    stdout (Optional[List(str)]): Captured stdout (e.g. prints, logs) from the tool invocation\n    stderr (Optional[List(str)]): Captured stderr from the tool invocation"
      },
      "ToolRuleType": {
        "type": "string",
        "enum": [
          "InitToolRule",
          "TerminalToolRule",
          "continue_loop",
          "conditional",
          "ToolRule",
          "require_parent_tools"
        ],
        "title": "ToolRuleType",
        "description": "Type of tool rule."
      },
      "ToolRunFromSource": {
        "properties": {
          "source_code": {
            "type": "string",
            "title": "Source Code",
            "description": "The source code of the function."
          },
          "args": {
            "type": "string",
            "title": "Args",
            "description": "The arguments to pass to the tool (as stringified JSON)."
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the tool to run."
          },
          "source_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Type",
            "description": "The type of the source code."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "source_code",
          "args"
        ],
        "title": "ToolRunFromSource"
      },
      "ToolUpdate": {
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the tool."
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the function."
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "description": "Metadata tags."
          },
          "module": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Module",
            "description": "The source code of the function."
          },
          "source_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Code",
            "description": "The source code of the function."
          },
          "source_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Type",
            "description": "The type of the source code."
          },
          "json_schema": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Json Schema",
            "description": "The JSON schema of the function (auto-generated from source_code if not provided)"
          }
        },
        "type": "object",
        "title": "ToolUpdate"
      },
      "UpdateAgent": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the agent."
          },
          "tool_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Ids",
            "description": "The ids of the tools used by the agent."
          },
          "source_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Ids",
            "description": "The ids of the sources used by the agent."
          },
          "block_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Block Ids",
            "description": "The ids of the blocks used by the agent."
          },
          "tags": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "description": "The tags associated with the agent."
          },
          "system": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "System",
            "description": "The system prompt used by the agent."
          },
          "tool_rules": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ChildToolRule"
                    },
                    {
                      "$ref": "#/components/schemas/InitToolRule"
                    },
                    {
                      "$ref": "#/components/schemas/TerminalToolRule"
                    },
                    {
                      "$ref": "#/components/schemas/ConditionalToolRule"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Rules",
            "description": "The tool rules governing the agent."
          },
          "llm_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LLMConfig"
              },
              {
                "type": "null"
              }
            ],
            "description": "The LLM configuration used by the agent."
          },
          "embedding_config": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EmbeddingConfig"
              },
              {
                "type": "null"
              }
            ],
            "description": "The embedding configuration used by the agent."
          },
          "message_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message Ids",
            "description": "The ids of the messages in the agent's in-context memory."
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the agent."
          },
          "metadata_": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata ",
            "description": "The metadata of the agent."
          }
        },
        "type": "object",
        "title": "UpdateAgent"
      },
      "UsageStatistics": {
        "properties": {
          "completion_tokens": {
            "type": "integer",
            "title": "Completion Tokens",
            "default": 0
          },
          "prompt_tokens": {
            "type": "integer",
            "title": "Prompt Tokens",
            "default": 0
          },
          "total_tokens": {
            "type": "integer",
            "title": "Total Tokens",
            "default": 0
          }
        },
        "type": "object",
        "title": "UsageStatistics"
      },
      "User": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^user-[a-fA-F0-9]{8}",
            "title": "Id",
            "description": "The human-friendly ID of the User",
            "examples": [
              "user-123e4567-e89b-12d3-a456-426614174000"
            ]
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The organization id of the user",
            "default": "org-00000000-0000-4000-8000-000000000000"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the user."
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At",
            "description": "The creation date of the user."
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "The update date of the user."
          },
          "is_deleted": {
            "type": "boolean",
            "title": "Is Deleted",
            "description": "Whether this user is deleted or not.",
            "default": false
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "name"
        ],
        "title": "User",
        "description": "Representation of a user.\n\nParameters:\n    id (str): The unique identifier of the user.\n    name (str): The name of the user.\n    created_at (datetime): The creation date of the user."
      },
      "UserCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the user."
          },
          "organization_id": {
            "type": "string",
            "title": "Organization Id",
            "description": "The organization id of the user."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "name",
          "organization_id"
        ],
        "title": "UserCreate"
      },
      "UserMessage-Input": {
        "properties": {
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "title": "Content"
          },
          "role": {
            "type": "string",
            "title": "Role",
            "default": "user"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "UserMessage"
      },
      "UserMessage-Output": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "title": "Date"
          },
          "message_type": {
            "type": "string",
            "enum": [
              "user_message"
            ],
            "const": "user_message",
            "title": "Message Type",
            "default": "user_message"
          },
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "id",
          "date",
          "message"
        ],
        "title": "UserMessage",
        "description": "A message sent by the user. Never streamed back on a response, only used for cursor pagination.\n\nAttributes:\n    message (str): The message sent by the user\n    id (str): The ID of the message\n    date (datetime): The date the message was created in ISO format"
      },
      "UserUpdate": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The id of the user to update."
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The new name of the user."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The new organization id of the user."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "id"
        ],
        "title": "UserUpdate"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "letta__schemas__letta_message__ToolCall": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "arguments": {
            "type": "string",
            "title": "Arguments"
          },
          "tool_call_id": {
            "type": "string",
            "title": "Tool Call Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "arguments",
          "tool_call_id"
        ],
        "title": "ToolCall"
      },
      "letta__schemas__message__Message": {
        "properties": {
          "created_by_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By Id",
            "description": "The id of the user that made this object."
          },
          "last_updated_by_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated By Id",
            "description": "The id of the user that made this object."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "The timestamp when the object was created."
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At",
            "description": "The timestamp when the object was last updated."
          },
          "id": {
            "type": "string",
            "pattern": "^message-[a-fA-F0-9]{8}",
            "title": "Id",
            "description": "The human-friendly ID of the Message",
            "examples": [
              "message-123e4567-e89b-12d3-a456-426614174000"
            ]
          },
          "role": {
            "$ref": "#/components/schemas/MessageRole",
            "description": "The role of the participant."
          },
          "text": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Text",
            "description": "The text of the message."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The unique identifier of the organization."
          },
          "agent_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Agent Id",
            "description": "The unique identifier of the agent."
          },
          "model": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Model",
            "description": "The model used to make the function call."
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the participant."
          },
          "tool_calls": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/letta__schemas__openai__chat_completions__ToolCall-Output"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Calls",
            "description": "The list of tool calls requested."
          },
          "tool_call_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Call Id",
            "description": "The id of the tool call."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "role"
        ],
        "title": "Message",
        "description": "Letta's internal representation of a message. Includes methods to convert to/from LLM provider formats.\n\nAttributes:\n    id (str): The unique identifier of the message.\n    role (MessageRole): The role of the participant.\n    text (str): The text of the message.\n    user_id (str): The unique identifier of the user.\n    agent_id (str): The unique identifier of the agent.\n    model (str): The model used to make the function call.\n    name (str): The name of the participant.\n    created_at (datetime): The time the message was created.\n    tool_calls (List[ToolCall]): The list of tool calls requested.\n    tool_call_id (str): The id of the tool call."
      },
      "letta__schemas__openai__chat_completion_request__Tool": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "const": "function",
            "title": "Type",
            "default": "function"
          },
          "function": {
            "$ref": "#/components/schemas/FunctionSchema"
          }
        },
        "type": "object",
        "required": [
          "function"
        ],
        "title": "Tool"
      },
      "letta__schemas__openai__chat_completion_request__ToolCall": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "const": "function",
            "title": "Type",
            "default": "function"
          },
          "function": {
            "$ref": "#/components/schemas/letta__schemas__openai__chat_completion_request__ToolCallFunction"
          }
        },
        "type": "object",
        "required": [
          "id",
          "function"
        ],
        "title": "ToolCall"
      },
      "letta__schemas__openai__chat_completion_request__ToolCallFunction": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "arguments": {
            "type": "string",
            "title": "Arguments"
          }
        },
        "type": "object",
        "required": [
          "name",
          "arguments"
        ],
        "title": "ToolCallFunction"
      },
      "letta__schemas__openai__chat_completion_response__Message": {
        "properties": {
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content"
          },
          "tool_calls": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/letta__schemas__openai__chat_completion_response__ToolCall"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tool Calls"
          },
          "role": {
            "type": "string",
            "title": "Role"
          },
          "function_call": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FunctionCall-Output"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "role"
        ],
        "title": "Message"
      },
      "letta__schemas__openai__chat_completion_response__ToolCall": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "const": "function",
            "title": "Type",
            "default": "function"
          },
          "function": {
            "$ref": "#/components/schemas/FunctionCall-Output"
          }
        },
        "type": "object",
        "required": [
          "id",
          "function"
        ],
        "title": "ToolCall"
      },
      "letta__schemas__openai__chat_completions__ToolCall-Input": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The ID of the tool call"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "default": "function"
          },
          "function": {
            "$ref": "#/components/schemas/letta__schemas__openai__chat_completions__ToolCallFunction",
            "description": "The arguments and name for the function"
          }
        },
        "type": "object",
        "required": [
          "id",
          "function"
        ],
        "title": "ToolCall"
      },
      "letta__schemas__openai__chat_completions__ToolCall-Output": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "The ID of the tool call"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "default": "function"
          },
          "function": {
            "$ref": "#/components/schemas/ToolCallFunction-Output",
            "description": "The arguments and name for the function"
          }
        },
        "type": "object",
        "required": [
          "id",
          "function"
        ],
        "title": "ToolCall"
      },
      "letta__schemas__openai__chat_completions__ToolCallFunction": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the function to call"
          },
          "arguments": {
            "type": "string",
            "title": "Arguments",
            "description": "The arguments to pass to the function (JSON dump)"
          }
        },
        "type": "object",
        "required": [
          "name",
          "arguments"
        ],
        "title": "ToolCallFunction"
      },
      "letta__schemas__tool__Tool": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^tool-[a-fA-F0-9]{8}",
            "title": "Id",
            "description": "The human-friendly ID of the Tool",
            "examples": [
              "tool-123e4567-e89b-12d3-a456-426614174000"
            ]
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "The description of the tool."
          },
          "source_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source Type",
            "description": "The type of the source code."
          },
          "module": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Module",
            "description": "The module of the function."
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id",
            "description": "The unique identifier of the organization associated with the tool."
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name of the function."
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags",
            "description": "Metadata tags.",
            "default": []
          },
          "source_code": {
            "type": "string",
            "title": "Source Code",
            "description": "The source code of the function."
          },
          "json_schema": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Json Schema",
            "description": "The JSON schema of the function."
          },
          "return_char_limit": {
            "type": "integer",
            "title": "Return Char Limit",
            "description": "The maximum number of characters in the response.",
            "default": 6000
          },
          "created_by_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created By Id",
            "description": "The id of the user that made this Tool."
          },
          "last_updated_by_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated By Id",
            "description": "The id of the user that made this Tool."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "source_code"
        ],
        "title": "Tool",
        "description": "Representation of a tool, which is a function that can be called by the agent.\n\nParameters:\n    id (str): The unique identifier of the tool.\n    name (str): The name of the function.\n    tags (List[str]): Metadata tags.\n    source_code (str): The source code of the function.\n    json_schema (Dict): The JSON schema of the function."
      }
    }
  },
  "servers": [
    {
      "url": "http://letta.localhost"
    },
    {
      "url": "http://localhost:8283"
    },
    {
      "url": "http://localhost:8083"
    },
    {
      "url": "http://localhost:3000"
    },
    {
      "url": "http://localhost:4200"
    },
    {
      "url": "https://app.letta.com"
    }
  ]
}